"use strict";(self.webpackChunkmarkdowns=self.webpackChunkmarkdowns||[]).push([[9627],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),u=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(p.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=u(t),c=r,g=s["".concat(p,".").concat(c)]||s[c]||m[c]||l;return t?a.createElement(g,i(i({ref:n},d),{},{components:t})):a.createElement(g,i({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=c;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[s]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7398:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=t(83117),r=(t(67294),t(3905));const l={authors:["xiangcheng.kuo"],tags:["problem-solving","spring-cloud","spring-cloud-openfeign","openfeign"]},i="\u5347\u7ea7\u6846\u67b6\u540e\u53d1\u73b0Feign\u8c03\u7528\u5931\u8d25\u65f6\u95f4\u683c\u5f0f\u5316\u95ee\u9898\u7684\u6392\u67e5\u548c\u89e3\u51b3",o={permalink:"/blog/2023/12/22/openfeign-zoned-datetime-formatting-problem",source:"@site/blog/2023-12-22/openfeign-zoned-datetime-formatting-problem.md",title:"\u5347\u7ea7\u6846\u67b6\u540e\u53d1\u73b0Feign\u8c03\u7528\u5931\u8d25\u65f6\u95f4\u683c\u5f0f\u5316\u95ee\u9898\u7684\u6392\u67e5\u548c\u89e3\u51b3",description:"\u95ee\u9898\u73b0\u8c61",date:"2023-12-22T00:00:00.000Z",formattedDate:"December 22, 2023",tags:[{label:"problem-solving",permalink:"/blog/tags/problem-solving"},{label:"spring-cloud",permalink:"/blog/tags/spring-cloud"},{label:"spring-cloud-openfeign",permalink:"/blog/tags/spring-cloud-openfeign"},{label:"openfeign",permalink:"/blog/tags/openfeign"}],readingTime:8.31,hasTruncateMarker:!1,authors:[{name:"Xiangcheng Kuo",title:"programmer on jvm platform",url:"https://github.com/orange-guo",imageURL:"https://github.com/orange-guo.png",key:"xiangcheng.kuo"}],frontMatter:{authors:["xiangcheng.kuo"],tags:["problem-solving","spring-cloud","spring-cloud-openfeign","openfeign"]},nextItem:{title:"\u5347\u7ea7\u5230spring-boot-3.1.0\u540enative-image\u542f\u52a8\u62a5\u9519\u4ee5\u53ca\u95ee\u9898\u89e3\u51b3",permalink:"/blog/2023/06/01/upgrading-to-spring-boot-3.1.0-native-image-startup-errors-and-solutions"}},p={authorsImageUrls:[void 0]},u=[{value:"\u95ee\u9898\u73b0\u8c61",id:"\u95ee\u9898\u73b0\u8c61",level:2},{value:"\u95ee\u9898\u539f\u56e0",id:"\u95ee\u9898\u539f\u56e0",level:2},{value:"\u89e3\u51b3\u65b9\u6848",id:"\u89e3\u51b3\u65b9\u6848",level:2},{value:"\u95ee\u9898\u6392\u67e5\u8fc7\u7a0b",id:"\u95ee\u9898\u6392\u67e5\u8fc7\u7a0b",level:2}],d={toc:u},s="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(s,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u95ee\u9898\u73b0\u8c61"},"\u95ee\u9898\u73b0\u8c61"),(0,r.kt)("p",null,"\u5347\u7ea7\u5185\u90e8\u6846\u67b6\u7248\u672c\u540e\uff0c\u53d1\u73b0Feign\u8c03\u7528\u5931\u8d25\uff0c\u62a5\u9519\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},"Failed to convert value of type 'java.lang.String' to required type 'java.time.ZonedDateTime'; \nnested exception is org.springframework.core.convert.ConversionFailedException: \n    Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.RequestParam @org.springframework.format.annotation.DateTimeFormat java.time.ZonedDateTime] for value '2023/12/18 02:57'; \n    nested exception is java.lang.IllegalArgumentException: Parse attempt failed for value [2023/12/18 02:57]\n")),(0,r.kt)("p",null,"\u5ba2\u6237\u7aef\u4f2a\u4ee3\u7801\u5982\u4e0b:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public interface FeignClient {\n\n    @GetMapping("/")\n    List<PlatformStandardOrderDto> test(\n            @RequestParam ZonedDateTime startTime,\n            @RequestParam ZonedDateTime endTime\n    );\n\n}\n')),(0,r.kt)("p",null,"\u8fd9\u4e2a\u95ee\u9898\u7684\u73b0\u8c61\u662fFeign\u8c03\u7528\u65f6\u53c2\u6570\u4e2d\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"ZonedDatetime"),"\u7c7b\u578b\u7684\u65f6\u95f4\u683c\u5f0f\u5316\u7684\u7ed3\u679c\u670d\u52a1\u7aef\u65e0\u6cd5\u89e3\u6790"),(0,r.kt)("h2",{id:"\u95ee\u9898\u539f\u56e0"},"\u95ee\u9898\u539f\u56e0"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u6846\u67b6\u5347\u7ea7\u524d\u540e\u5185\u90e8\u7684\u65f6\u95f4\u683c\u5f0f\u5316\u884c\u4e3a\u53d1\u751f\u4e86\u53d8\u5316\u5bfc\u81f4\u8fd9\u4e2a\u95ee\u9898\u7684\u51fa\u73b0.",(0,r.kt)("br",null),"\n\u5728\u65e9\u671f\u6846\u67b6\u4e2d\u6211\u4eec\u81ea\u5b9a\u4e49\u4e86\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"SpringMvcContract"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Bean\n@Primary\nfun contract(mapper: ObjectMapper, discoverer: DefaultParameterNameDiscoverer): Contract =\n    SpringMvcContract(\n        listOf(\n            EntityFiltersMappingParameterProcessor(mapper, discoverer),\n            MatrixVariableParameterProcessor(),\n            RequestHeaderParameterProcessor(),\n            PathVariableParameterProcessor(),\n            RequestPartParameterProcessor(),\n            QueryMapParameterProcessor()\n        )\n    )\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"SpringMvcContract"),"\u591f\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0Feign\u7684\u6ce8\u89e3\u53c2\u6570\u7684\u89e3\u6790(\u4f8b\u5982",(0,r.kt)("inlineCode",{parentName:"p"},"@RequestParam"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"@PathVariable"),")")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u6846\u67b6\u5347\u7ea7\u524d\u7684\u884c\u4e3a:",(0,r.kt)("br",null),"\n\u7531\u4e8e\u6846\u67b6\u5347\u7ea7\u524d\u7684\u4ee3\u7801\u6ca1\u6709\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"SpringMvcContract"),"\u914d\u7f6e",(0,r.kt)("inlineCode",{parentName:"p"},"ConversionService"),", \u6240\u4ee5",(0,r.kt)("inlineCode",{parentName:"p"},"SpringMvcContract"),"\u65e0\u6cd5\u5904\u7406",(0,r.kt)("inlineCode",{parentName:"p"},"ZonedDateTime"),"\n\u4ece\u800c\u5bfc\u81f4\u89e6\u53d1\u4e86Feign\u7684\u9ed8\u8ba4\u884c\u4e3a\u4e5f\u5c31\u662f\u8c03\u7528\u53c2\u6570\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"toString"),"\u65b9\u6cd5\u6765\u5c06\u53c2\u6570\u8f6c\u4e3aString, \u5bf9\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"ZonedDateTime"),"\u7c7b\u578b\u7684\u53c2\u6570,\n\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"toString"),"\u65b9\u6cd5, \u751f\u6210\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"iso-8601"),"\u683c\u5f0f, \u4f8b\u5982",(0,r.kt)("inlineCode",{parentName:"p"},"2023-12-18T02:57:00+08:00[Asia/Shanghai]"),",\n\u8fd9\u79cd\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u670d\u52a1\u7aef\u662f\u53ef\u4ee5\u89e3\u6790\u7684"),(0,r.kt)("p",{parentName:"blockquote"},"\u6846\u67b6\u5347\u7ea7\u540e\u7684\u884c\u4e3a:",(0,r.kt)("br",null),"\n\u7531\u4e8e\u6846\u67b6\u5185\u90e8\u914d\u7f6e\u4e86",(0,r.kt)("inlineCode",{parentName:"p"},"ConversionService"),", \u6240\u4ee5\u4f1a\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"ConversionService"),"\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"convert"),"\n\u65b9\u6cd5\u6765\u5b9e\u73b0\u5c06\u53c2\u6570\u7684\u89e3\u6790, ",(0,r.kt)("inlineCode",{parentName:"p"},"ConversionService"),"\n\u6700\u7ec8\u4f1a\u59d4\u6258",(0,r.kt)("inlineCode",{parentName:"p"},"FormattingConversionService"),"\u5c06",(0,r.kt)("inlineCode",{parentName:"p"},"ZonedDateTime"),"\u7c7b\u578b\u7684\u53c2\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32, \u8fd9\u79cd\u60c5\u51b5\u4e0b,\n\u4f1a\u5c06\u65f6\u95f4\u8f6c\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"yyyy/MM/dd HH:mm"),"\u683c\u5f0f\u7684\u5b57\u7b26\u4e32, \u6240\u4ee5\u5bfc\u81f4\u4e86\u670d\u52a1\u7aef\u65e0\u6cd5\u89e3\u6790.")),(0,r.kt)("h2",{id:"\u89e3\u51b3\u65b9\u6848"},"\u89e3\u51b3\u65b9\u6848"),(0,r.kt)("p",null,"\u4e3a\u53c2\u6570\u589e\u52a0",(0,r.kt)("inlineCode",{parentName:"p"},"@DateTimeFormat"),"\u6ce8\u89e3\u6765\u6307\u5b9a\u65f6\u95f4\u683c\u5f0f\u5316\u7684\u683c\u5f0f, \u4f8b\u5982:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public interface FeignClient {\n\n    @GetMapping("/")\n    List<PlatformStandardOrderDto> test(\n            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) @RequestParam ZonedDateTime startTime,\n            @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) @RequestParam ZonedDateTime endTime\n    );\n\n}\n')),(0,r.kt)("h2",{id:"\u95ee\u9898\u6392\u67e5\u8fc7\u7a0b"},"\u95ee\u9898\u6392\u67e5\u8fc7\u7a0b"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5f53FeignClient\u63a5\u53e3\u7684\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6, \u4f1a\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"li"},"ReflectiveFeign"),"\u6765\u59d4\u6258",(0,r.kt)("inlineCode",{parentName:"li"},"MethodHandler"),"\u6765\u5904\u7406\u65b9\u6cd5\u8c03\u7528")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    if ("equals".equals(method.getName())) {\n        try {\n            Object otherHandler =\n                    args.length > 0 && args[0] != null ? Proxy.getInvocationHandler(args[0]) : null;\n            return equals(otherHandler);\n        } catch (IllegalArgumentException e) {\n            return false;\n        }\n    } else if ("hashCode".equals(method.getName())) {\n        return hashCode();\n    } else if ("toString".equals(method.getName())) {\n        return toString();\n    }\n\n    return dispatch.get(method).invoke(args);\n}\n')),(0,r.kt)("p",null,"\u5176\u4e2d",(0,r.kt)("inlineCode",{parentName:"p"},"dispatch"),"\u662f\u7528\u6765\u4fdd\u5b58\u65b9\u6cd5\u540d\u79f0\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"MethodHandler"),"\u7684\u6620\u5c04\u5173\u7cfb\u7684, ",(0,r.kt)("inlineCode",{parentName:"p"},"MethodHandler"),"\u662f\u7528\u6765\u5904\u7406\u65b9\u6cd5\u8c03\u7528(\n\u5f53\u524d\u7684\u5b9e\u73b0\u4e2d",(0,r.kt)("inlineCode",{parentName:"p"},"MethodHandler"),"\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"SynchronousMethodHandler"),")"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"MethodHandler\u5185\u90e8\u7684invoke\u6267\u884c\u6d41\u7a0b\u5982\u4e0b:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"\n@Override\npublic Object invoke(Object[] argv) throws Throwable {\n    RequestTemplate template = buildTemplateFromArgs.create(argv);\n    Options options = findOptions(argv);\n    Retryer retryer = this.retryer.clone();\n    while (true) {\n        try {\n            return executeAndDecode(template, options);\n        } catch (RetryableException e) {\n            try {\n                retryer.continueOrPropagate(e);\n            } catch (RetryableException th) {\n                Throwable cause = th.getCause();\n                if (propagationPolicy == UNWRAP && cause != null) {\n                    throw cause;\n                } else {\n                    throw th;\n                }\n            }\n            if (logLevel != Logger.Level.NONE) {\n                logger.logRetry(metadata.configKey(), logLevel);\n            }\n            continue;\n        }\n    }\n}\n")),(0,r.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u6211\u4eec\u9700\u8981\u5173\u5fc3\u7684\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"buildTemplateFromArgs.create(argv);"),"\u8fd9\u4e00\u884c,\n\u8fd9\u4e00\u884c\u4ee3\u7801\u4f1a\u6839\u636e\u65b9\u6cd5\u7684\u53c2\u6570\u6765\u6784\u5efa",(0,r.kt)("inlineCode",{parentName:"p"},"RequestTemplate"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"RequestTemplate"),"\u662f\u7528\u6765\u4fdd\u5b58\u8bf7\u6c42\u7684\u4fe1\u606f\u7684, \u4f8b\u5982\u8bf7\u6c42\u7684URL, \u8bf7\u6c42\u7684\u65b9\u6cd5,\n\u8bf7\u6c42\u7684\u53c2\u6570\u7b49\u7b49, \u53ea\u8981\u77e5\u9053\u4e86",(0,r.kt)("inlineCode",{parentName:"p"},"RequestTemplate"),"\u4e2d\u5bf9\u5e94\u53c2\u6570\u7684\u6784\u9020\u8fc7\u7a0b\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053Feign\u662f\u5982\u4f55\u5c06\u53c2\u6570\u8f6c\u4e3a\u8bf7\u6c42\u7684\u53c2\u6570\u7684\u4e86"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"buildTemplateFromArgs.create(argv);"),"\u7684\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\n@Override\npublic RequestTemplate create(Object[] argv) {\n    RequestTemplate mutable = RequestTemplate.from(metadata.template());\n    mutable.feignTarget(target);\n    if (metadata.urlIndex() != null) {\n        int urlIndex = metadata.urlIndex();\n        checkArgument(argv[urlIndex] != null, "URI parameter %s was null", urlIndex);\n        mutable.target(String.valueOf(argv[urlIndex]));\n    }\n    Map<String, Object> varBuilder = new LinkedHashMap<String, Object>();\n    for (Entry<Integer, Collection<String>> entry : metadata.indexToName().entrySet()) {\n        int i = entry.getKey();\n        Object value = argv[entry.getKey()];\n        if (value != null) { // Null values are skipped.\n            if (indexToExpander.containsKey(i)) {\n                value = expandElements(indexToExpander.get(i), value);\n            }\n            for (String name : entry.getValue()) {\n                varBuilder.put(name, value);\n            }\n        }\n    }\n\n    RequestTemplate template = resolve(argv, mutable, varBuilder);\n    if (metadata.queryMapIndex() != null) {\n        // add query map parameters after initial resolve so that they take\n        // precedence over any predefined values\n        Object value = argv[metadata.queryMapIndex()];\n        Map<String, Object> queryMap = toQueryMap(value);\n        template = addQueryMapQueryParameters(queryMap, template);\n    }\n\n    if (metadata.headerMapIndex() != null) {\n        template =\n                addHeaderMapHeaders((Map<String, Object>) argv[metadata.headerMapIndex()], template);\n    }\n\n    return template;\n}\n\n\n')),(0,r.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u6211\u4eec\u9700\u8981\u5173\u6ce8\u7684\u662f\u8fd9\u4e2a\u8bed\u53e5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},"if (value != null) { // Null values are skipped.\n    if (indexToExpander.containsKey(i)) {\n        value = expandElements(indexToExpander.get(i), value);\n    }\n    for (String name : entry.getValue()) {\n        varBuilder.put(name, value);\n    }\n}\n\nprivate Object expandElements(Expander expander, Object value) {\n    if (value instanceof Iterable) {\n        return expandIterable(expander, (Iterable) value);\n    }\n    return expander.expand(value);\n}\n")),(0,r.kt)("p",null,"\u8fd9\u4e2a\u8bed\u53e5\u4f1a\u5c06\u53c2\u6570\u8f6c\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"RequestTemplate"),"\u4e2d\u7684\u53c2\u6570, ",(0,r.kt)("inlineCode",{parentName:"p"},"Expander"),"\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"Feign"),"\u4e2d\u7684\u4e00\u4e2a\u63a5\u53e3, \u7528\u6765\u5c06\u53c2\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32,\n\u800c",(0,r.kt)("inlineCode",{parentName:"p"},"indexToExpander"),"\u8868\u8fbe\u7684\u662f\u53c2\u6570\u7684\u7d22\u5f15\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"Expander"),"\u7684\u6620\u5c04\u5173\u7cfb,\n\u5728\u6211\u4eec\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"Case"),"\u4e2d\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u8d70\u5230",(0,r.kt)("inlineCode",{parentName:"p"},"indexToExpander"),"\u7684, \u6240\u4ee5\u6700\u7ec8\u4f1a\u76f4\u63a5\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"varBuilder.put(name, value);"),"\u8fd9\u4e00\u884c,\n\u8fd9\u4e00\u884c\u4f1a\u5c06\u53c2\u6570\u8f6c\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"RequestTemplate"),"\u4e2d\u7684\u53c2\u6570,\n\u540e\u7eed\u9700\u8981\u5c06\u53c2\u6570\u503c\u8f6c\u4e3a\u5b57\u7b26\u4e32, \u6240\u4ee5\u8fd8\u9700\u8981\u4e86\u89e3",(0,r.kt)("inlineCode",{parentName:"p"},"RequestTemplate"),"\u4e2d\u7684\u53c2\u6570\u662f\u5982\u4f55\u8f6c\u4e3a\u5b57\u7b26\u4e32\u7684,\n\u6240\u4ee5\u9700\u8981\u67e5\u770b",(0,r.kt)("inlineCode",{parentName:"p"},"RequestTemplate template = resolve(argv, mutable, varBuilder);"),"\n\u8fd9\u4e00\u6bb5\u8c03\u7528\u7684resolve\u65b9\u6cd5, \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},"protected RequestTemplate resolve(Object[] argv,\n                                  RequestTemplate mutable,\n                                  Map<String, Object> variables) {\n    return mutable.resolve(variables);\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u63a5\u4e0b\u6765\u9700\u8981\u67e5\u770b",(0,r.kt)("inlineCode",{parentName:"li"},"RequestTemplate"),"\u4e2d\u7684",(0,r.kt)("inlineCode",{parentName:"li"},"resolve"),"\u65b9\u6cd5\u7684\u5b9e\u73b0, \u5177\u4f53\u5b9e\u73b0\u5982\u4e0b:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public RequestTemplate resolve(Map<String, ?> variables) {\n\n    StringBuilder uri = new StringBuilder();\n\n    /* create a new template form this one, but explicitly */\n    RequestTemplate resolved = RequestTemplate.from(this);\n\n    if (this.uriTemplate == null) {\n        /* create a new uri template using the default root */\n        this.uriTemplate = UriTemplate.create("", !this.decodeSlash, this.charset);\n    }\n\n    String expanded = this.uriTemplate.expand(variables);\n    if (expanded != null) {\n        uri.append(expanded);\n    }\n\n    /*\n     * for simplicity, combine the queries into the uri and use the resulting uri to seed the\n     * resolved template.\n     */\n    if (!this.queries.isEmpty()) {\n        /*\n         * since we only want to keep resolved query values, reset any queries on the resolved copy\n         */\n        resolved.queries(Collections.emptyMap());\n        StringBuilder query = new StringBuilder();\n        Iterator<QueryTemplate> queryTemplates = this.queries.values().iterator();\n\n        while (queryTemplates.hasNext()) {\n            QueryTemplate queryTemplate = queryTemplates.next();\n            String queryExpanded = queryTemplate.expand(variables);\n            if (Util.isNotBlank(queryExpanded)) {\n                query.append(queryExpanded);\n                if (queryTemplates.hasNext()) {\n                    query.append("&");\n                }\n            }\n        }\n\n        String queryString = query.toString();\n        if (!queryString.isEmpty()) {\n            Matcher queryMatcher = QUERY_STRING_PATTERN.matcher(uri);\n            if (queryMatcher.find()) {\n                /* the uri already has a query, so any additional queries should be appended */\n                uri.append("&");\n            } else {\n                uri.append("?");\n            }\n            uri.append(queryString);\n        }\n    }\n\n    /* add the uri to result */\n    resolved.uri(uri.toString());\n\n    /* headers */\n    if (!this.headers.isEmpty()) {\n        /*\n         * same as the query string, we only want to keep resolved values, so clear the header map on\n         * the resolved instance\n         */\n        resolved.headers(Collections.emptyMap());\n        for (HeaderTemplate headerTemplate : this.headers.values()) {\n            /* resolve the header */\n            String header = headerTemplate.expand(variables);\n            if (!header.isEmpty()) {\n                /* split off the header values and add it to the resolved template */\n                String headerValues = header.substring(header.indexOf(" ") + 1);\n                if (!headerValues.isEmpty()) {\n                    /* append the header as a new literal as the value has already been expanded. */\n                    resolved.header(headerTemplate.getName(), Literal.create(headerValues));\n                }\n            }\n        }\n    }\n\n    if (this.bodyTemplate != null) {\n        resolved.body(this.bodyTemplate.expand(variables));\n    }\n\n    /* mark the new template resolved */\n    resolved.resolved = true;\n    return resolved;\n}\n')),(0,r.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u6bd4\u8f83\u957f, \u6211\u4eec\u9700\u8981\u5173\u6ce8\u7684\u662f\u8fd9\u4e00\u6bb5:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},'    if (!this.queries.isEmpty()) {\n      /*\n       * since we only want to keep resolved query values, reset any queries on the resolved copy\n       */\n      resolved.queries(Collections.emptyMap());\n      StringBuilder query = new StringBuilder();\n      Iterator<QueryTemplate> queryTemplates = this.queries.values().iterator();\n\n      while (queryTemplates.hasNext()) {\n        QueryTemplate queryTemplate = queryTemplates.next();\n        String queryExpanded = queryTemplate.expand(variables);\n        if (Util.isNotBlank(queryExpanded)) {\n          query.append(queryExpanded);\n          if (queryTemplates.hasNext()) {\n            query.append("&");\n          }\n        }\n      }\n\n      String queryString = query.toString();\n      if (!queryString.isEmpty()) {\n        Matcher queryMatcher = QUERY_STRING_PATTERN.matcher(uri);\n        if (queryMatcher.find()) {\n          /* the uri already has a query, so any additional queries should be appended */\n          uri.append("&");\n        } else {\n          uri.append("?");\n        }\n        uri.append(queryString);\n      }\n    }\n')),(0,r.kt)("p",null,"\u6700\u7ec8\u8fd9\u4e2a\u8bed\u53e5",(0,r.kt)("inlineCode",{parentName:"p"},"String queryExpanded = queryTemplate.expand(variables);"),"\u4f1a\u5c06\u53c2\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32, \u6240\u4ee5\u6700\u7ec8\u6211\u4eec\u5f97\u5230\u4e86\u53c2\u6570\u7684\u5b57\u7b26\u4e32\u5f62\u5f0f,"))}m.isMDXComponent=!0}}]);