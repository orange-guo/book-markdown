"use strict";(self.webpackChunkmarkdowns=self.webpackChunkmarkdowns||[]).push([[1728],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=s(t),p=r,f=m["".concat(l,".").concat(p)]||m[p]||d[p]||a;return t?o.createElement(f,i(i({ref:n},u),{},{components:t})):o.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[m]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5260:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const a={authors:["xiangcheng.kuo"],tags:["kotlin","coroutines","command-line"]},i="\u89e3\u51b3\u5728Kotlin Coroutines\u4e2d\u7684\u547d\u4ee4\u884c\u8c03\u7528\u4e2d\u51fa\u73b0Stream Closed\u5f02\u5e38",c={permalink:"/markdowns/blog/2023/04/05/fix-stream-closed-exception-in-command-line-invocation-in-kotlin-coroutine",source:"@site/blog/2023-04-05/fix-stream-closed-exception-in-command-line-invocation-in-kotlin-coroutine.md",title:"\u89e3\u51b3\u5728Kotlin Coroutines\u4e2d\u7684\u547d\u4ee4\u884c\u8c03\u7528\u4e2d\u51fa\u73b0Stream Closed\u5f02\u5e38",description:"\u4e4b\u524d\u6709\u4e00\u4e2a\u670d\u52a1\u5185\u90e8\u9700\u8981\u8c03\u7528\u5916\u90e8\u7a0b\u5e8f(rclone), \u4e8e\u662f\u6211\u5199\u4e86\u4e00\u4e2a\u7c7b\u6765\u5c01\u88c5\u547d\u4ee4\u884c\u8c03\u7528, \u8be5\u7c7b\u4e3b\u8981\u662f\u57fa\u4e8ekotlinx.coroutines",date:"2023-04-05T00:00:00.000Z",formattedDate:"April 5, 2023",tags:[{label:"kotlin",permalink:"/markdowns/blog/tags/kotlin"},{label:"coroutines",permalink:"/markdowns/blog/tags/coroutines"},{label:"command-line",permalink:"/markdowns/blog/tags/command-line"}],readingTime:2.86,hasTruncateMarker:!0,authors:[{name:"Xiangcheng Kuo",title:"programmer on jvm platform",url:"https://github.com/orange-guo",imageURL:"https://github.com/orange-guo.png",key:"xiangcheng.kuo"}],frontMatter:{authors:["xiangcheng.kuo"],tags:["kotlin","coroutines","command-line"]},nextItem:{title:"\u4e3aDocusaurus\u4e2d\u7684Blog\u542f\u7528\u8bc4\u8bba\u529f\u80fd",permalink:"/markdowns/blog/2023/04/04/enable-comment-in-docusaurus"}},l={authorsImageUrls:[void 0]},s=[],u={toc:s},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u4e4b\u524d\u6709\u4e00\u4e2a\u670d\u52a1\u5185\u90e8\u9700\u8981\u8c03\u7528\u5916\u90e8\u7a0b\u5e8f(",(0,r.kt)("inlineCode",{parentName:"p"},"rclone"),"), \u4e8e\u662f\u6211\u5199\u4e86\u4e00\u4e2a\u7c7b\u6765\u5c01\u88c5\u547d\u4ee4\u884c\u8c03\u7528, \u8be5\u7c7b\u4e3b\u8981\u662f\u57fa\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"kotlinx.coroutines"),"\n\u6765\u5b9e\u73b0\u7684.",(0,r.kt)("br",null),"\n\u4ee3\u7801\u5982\u4e0b:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="CommandExecutorImpl.kt"',title:'"CommandExecutorImpl.kt"'},'import java.io.IOException\nimport java.io.InputStream\n\nclass CommandExecutorImpl : CommandExecutor, LogCapability {\n\n    override suspend fun execute(options: CommandExecutionOptions) =\n        coroutineScope {\n            val command: String = options.command.joinToString(separator = " ")\n            logger.info("$ {}", command)\n            val process: Process = createProcess(options)\n\n            val asyncReadStdOut = asyncRead(input = process.inputStream, consume = options.onNewStdoutRead)\n            val asyncReadStderr = asyncRead(input = process.errorStream, consume = options.onNewStderrRead)\n            try {\n                while (process.isAlive) {\n                    delay(500)\n                }\n                if (process.exitValue() != 0) {\n                    throw IllegalStateException("Process exited with non-zero exit code")\n                }\n            } finally {\n                // https://kotlinlang.org/docs/cancellation-and-timeouts.html#run-non-cancellable-block\n                withContext(NonCancellable) {\n                    process.destroy()\n                    asyncReadStdOut.cancelAndJoin()\n                    asyncReadStderr.cancelAndJoin()\n                }\n            }\n        }\n\n    private suspend fun createProcess(options: CommandExecutionOptions): Process =\n        withContext(Dispatchers.IO) {\n            Runtime.getRuntime().exec(options.command.toTypedArray())\n        }\n\n    private fun CoroutineScope.asyncRead(input: InputStream, consume: suspend (String) -> Unit): Job =\n        launch {\n            try {\n                input.bufferedReader()\n                    .lineSequence()\n                    .asFlow()\n                    .collect { line ->\n                        consume(line)\n                    }\n            } catch (ex: IOException) {\n                logger.warn("Error while reading from process", ex)\n                throw ex\n            }\n        }\n\n    companion object : LogCapability\n\n}\n')),(0,r.kt)("p",null,"\u6700\u8fd1\u6211\u53d1\u73b0\u5728\u4f7f\u7528\u8be5\u7c7b\u65f6, \u6709\u65f6\u4f1a\u629b\u51fa",(0,r.kt)("inlineCode",{parentName:"p"},"java.io.IOException: Stream closed"),"\u5f02\u5e38",(0,r.kt)("br",null),"\n\u5f02\u5e38\u6808\u5982\u4e0b:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},"14:10:38.016 [DefaultDispatcher-worker-117] WARN com.fastonetech.billing.sync.infra.command.CommandExecutorImpl - Error while reading from process\njava.io.IOException: Stream closed\n    at java.base/java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:168)\n    at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:334)\n    at java.base/sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:270)\n    at java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:313)\n    at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:188)\n    at java.base/java.io.InputStreamReader.read(InputStreamReader.java:177)\n    at java.base/java.io.BufferedReader.fill(BufferedReader.java:162)\n    at java.base/java.io.BufferedReader.readLine(BufferedReader.java:329)\n    at java.base/java.io.BufferedReader.readLine(BufferedReader.java:396)\n    at kotlin.io.LinesSequence$iterator$1.hasNext(ReadWrite.kt:79)\n    at kotlinx.coroutines.flow.FlowKt__BuildersKt$asFlow$$inlined$unsafeFlow$5.collect(SafeCollector.common.kt:114)\n    at com.fastonetech.billing.sync.infra.command.CommandExecutorImpl$asyncRead$1.invokeSuspend(CommandExecutorImpl.kt:58)\n    at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n    at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)\n    at kotlinx.coroutines.internal.LimitedDispatcher.run(LimitedDispatcher.kt:42)\n    at kotlinx.coroutines.scheduling.TaskImpl.run(Tasks.kt:95)\n    at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:570)\n    at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:750)\n    at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:677)\n    at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:664)\n\n")),(0,r.kt)("p",null,"\u4e0b\u9762\u5c06\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u539f\u56e0\u548c\u89e3\u51b3\u65b9\u6848."))}d.isMDXComponent=!0}}]);